name: "Simple LLM Code review"
description: "Simple LLM CodeReview"
author: "SnoopyComp"

runs:
  using: "composite"
  steps:
    - name: Prepare workdir
      id: prep
      shell: bash
      run: |
        set -euo pipefail
        dir="${RUNNER_TEMP}/llm_prompt"
        mkdir -p "$dir"
        echo "workdir=$dir" >> "$GITHUB_OUTPUT"
        echo "WORKDIR=$dir" >> "$GITHUB_ENV"
        echo "PROMPTDIR=$GITHUB_ACTION_PATH/prompt" >> "$GITHUB_ENV"
        echo "WORKFLOWDIR=$GITHUB_ACTION_PATH/workflow" >> "$GITHUB_ENV"

    - name: Check trigger (@claude)
      id: gate
      shell: bash
      run: bash "$WORKFLOWDIR/10_check_run.sh"

    - name: Normalize cost
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      shell: bash
      env:
        COST_INPUT: ${{ inputs.cost }}
      run: |
        set -euo pipefail
        ci="${COST_INPUT,,}"
        case "$ci" in
          high|middle|low) COST="$ci" ;;
          normal|nomal)    COST="middle" ;;  # common typo/alias â†’ middle
          *) echo "[WARN] invalid cost='${COST_INPUT}'; falling back to 'middle'"; COST="middle" ;;
        esac
        echo "COST=$COST" >> "$GITHUB_ENV"
        
    - name: Select model/turns/tools
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      id: select
      shell: bash
      env:
        COST: ${{ env.COST }}
        REVIEW_DEPTH: ${{ inputs.review-depth }}
        MAX_TURNS_INPUT: ${{ inputs.max-turns }}
        USE_INLINE_COMMENT:  ${{ inputs.use-inline-review }}
      run: bash "$WORKFLOWDIR/20_set_arguments.sh"

    - name: Read PR from event payload (10)
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        MAX_BYTES_PR: ${{ inputs.max-bytes-pr }}
      run: bash "$PROMPTDIR/10_read_pr.sh"

    - name: Extract issue numbers (20)
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      id: issues
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
      run: bash "$PROMPTDIR/20_extract_issue_numbers.sh"

    - name: Extract reference paths (30)
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      id: references
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
      run: bash "$PROMPTDIR/30_extract_reference_paths.sh"

    - name: Normalize reference list filename
      if: ${{ (inputs.force-run == 'true' || steps.gate.outputs.run == 'true') && steps.references.outputs.found == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
      run: |
        set -euo pipefail
        if [ -s "$WORKDIR/refs_path.txt" ]; then
          cp "$WORKDIR/refs_path.txt" "$WORKDIR/refs.txt"
        fi

    - name: Fetch issues (40)
      if: ${{ (inputs.force-run == 'true' || steps.gate.outputs.run == 'true') && steps.issues.outputs.found == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        MAX_BYTES_ISSUE: ${{ inputs.max-bytes-issue }}
        GITHUB_TOKEN: ${{ github.token }}
        GH_TOKEN: ${{ github.token }}
      run: bash "$PROMPTDIR/40_fetch_issues.sh"

    - name: Read reference files (50)
      if: ${{ (inputs.force-run == 'true' || steps.gate.outputs.run == 'true') && steps.references.outputs.found == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        MAX_BYTES_REF: ${{ inputs.max-bytes-ref }}
      run: bash "$PROMPTDIR/50_read_references.sh"

    - name: Build instruction section (90)
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        OUT: ${{ steps.prep.outputs.workdir }}/_instruction.md
        MODEL_COST: ${{ env.COST }}
        REVIEW_DEPTH: ${{ inputs.review-depth }}
        USE_INLINE_COMMENT: ${{ inputs.use-inline-review }}
        LANGUAGE: ${{ inputs.language }}
        USE_ISSUE: ${{ steps.issues.outputs.found }}
        USE_REFERENCE: ${{ steps.references.outputs.found }}
        REVIEW_INSTRUCTIONS: ${{ inputs.instructions }}
        MAX_TURNS: ${{ steps.select.outputs.max_turns }}
      run: bash "$PROMPTDIR/90_build_instruction_prompt.sh"

    - name: Build info section (99)
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        OUT: ${{ steps.prep.outputs.workdir }}/_info.md
        USE_ISSUE: ${{ steps.issues.outputs.found }}
        USE_REFERENCE: ${{ steps.references.outputs.found }}
      run: bash "$PROMPTDIR/99_build_info_prompt.sh"

    - name: Assemble final prompt & set outputs
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      id: finalize
      shell: bash
      env:
        WORKDIR: ${{ steps.prep.outputs.workdir }}
        OUT: ${{ inputs.output-file }}
      run: |
        set -euo pipefail
        mkdir -p "$(dirname "$OUT")"
        cat "$WORKDIR/_instruction.md" "$WORKDIR/_info.md" > "$OUT"
        echo "prompt-path=$OUT" >> "$GITHUB_OUTPUT"
        {
          printf "prompt<<__PROMPT__\n"
          cat "$OUT"
          printf "\n__PROMPT__\n"
        } >> "$GITHUB_OUTPUT"

    - name: Run Claude Code review
      if: ${{ inputs.force-run == 'true' || steps.gate.outputs.run == 'true' }}
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ inputs.anthropic-api-key }}
        github_token: ${{ github.token }}
        prompt: ${{ steps.finalize.outputs.prompt }}
        claude_args: |
          ${{ steps.select.outputs.model }}
          --max-turns ${{ steps.select.outputs.max_turns }}
          --allowed-tools "${{ steps.select.outputs.model_tools }}"
          ${{ inputs.claude-args-extra }}


inputs:
  output-file:
    description: "Relative path to write the assembled prompt markdown."
    required: false
    default: "llm_review_prompt.md"
  language:
    description: "Review language for all comments."
    required: false
    default: "English"
  cost:
    description: "Model cost level (choose: high | middle | low)"
    required: false
    default: "low"
  use-inline-review:
    description: "Whether to use inline review comments (true/false)."
    required: false
    default: "true"
  review-depth:
    description: "Review depth (choose: essential | balanced | thorough)"
    required: false
    default: "balanced"
  max-bytes-pr:
    description: "Maximum bytes to include from PR body."
    required: false
    default: "100000"
  max-bytes-issue:
    description: "Maximum bytes to include from each Issue body."
    required: false
    default: "80000"
  max-bytes-ref:
    description: "Maximum bytes to include from each Reference file."
    required: false
    default: "120000"
  instructions:
    description: "Additional review instructions to include at the top of the prompt."
    required: false
    default: ""
  anthropic-api-key:
    description: "Anthropic API key for Claude Code (use repo/org secret)."
    required: true
  max-turns:
    description: "Claude Code max interaction turns."
    required: false
    default: ""
  claude-args-extra:
    description: "Extra flags for Claude Code CLI."
    required: false
    default: ""
  force-run:
    description: "Ignore the @claude gate and run the review on every pull_request event."
    required: false
    default: "false"

outputs:
  prompt:
    description: "The assembled prompt text"
    value: ${{ steps.finalize.outputs.prompt }}
  prompt-path:
    description: "Written prompt file path"
    value: ${{ steps.finalize.outputs.prompt-path }}

branding:
  icon: "book-open"
  color: "purple"
